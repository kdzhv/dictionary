{"version":3,"sources":["components/Synonym/Synonym.jsx","components/Card/Card.jsx","App.js","reportWebVitals.js","index.js"],"names":["Synonym","synonym","className","Card","word","description","example","cardId","partOfSpeech","useState","cardState","setCardState","synonyms","setSynonyms","isFavourite","setIsFavourite","deleteFromStorage","window","localStorage","removeItem","useEffect","getItem","getFromStorage","id","onClick","fetch","then","response","json","reduce","acc","curr","concat","meanings","filter","meaning","exactParts","part","definitions","map","definition","foundSynonyms","slice","slicedSynonyms","catch","error","i","type","setItem","toggleFavourite","xmlns","width","height","viewBox","fill","d","stroke","href","target","rel","App","cards","setCards","shownCards","setShownCards","filterCards","card","cache","favourites","Object","keys","favouriteCards","includes","console","log","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.334ec160.chunk.js","sourcesContent":["import React from 'react';\n\nconst Synonym = ({ synonym }) => {\n    return (\n    <button className=\"tag tag--synonyms\">\n        {synonym}\n    </button>\n)\n}\n\nexport default Synonym;\n","import React, { useState, useEffect } from 'react';\nimport Synonym from '../Synonym/Synonym';\n\nconst Card = ({ word, description, example, cardId, partOfSpeech }) => {\n    const [cardState, setCardState] = useState('');\n    const [synonyms, setSynonyms] = useState([]);\n    const [isFavourite, setIsFavourite] = useState(false);\n\n    const initSynonyms = 3;\n\n    const toggleFavourite = (cardId) => {\n        if (isFavourite) {\n            setIsFavourite(false)\n            deleteFromStorage(cardId)\n        } else {\n            window.localStorage.setItem(cardId, word);\n            setIsFavourite(true)\n        }\n    }\n\n    const getFromStorage = (cardId) => {\n        return window.localStorage.getItem(cardId);\n    }\n\n    const deleteFromStorage = (cardId) => {\n        window.localStorage.removeItem(cardId);\n    }\n\n    useEffect(() => {\n        getFromStorage(cardId) ? setIsFavourite(true) : setIsFavourite(false);\n    }, []);\n\n    const toggleExpand = () => {\n        if (cardState === '') {\n            setCardState('flashcard--expanded');\n            fetch(`https://api.dictionaryapi.dev/api/v2/entries/en_US/${word}`)\n                .then(response => response.json())\n                //получили объект с частями речи слова\n                .then(json => json.reduce((acc, curr) => acc = acc.concat(curr.meanings.filter(meaning => meaning.partOfSpeech === partOfSpeech)), []))\n                //получили массив синонимов\n                .then(exactParts => exactParts.reduce((acc, part) => part.definitions.map(definition => definition.synonyms), []))\n                //отсекаем кол-во необходимых синонимов\n                .then(foundSynonyms => foundSynonyms[0].slice(0, initSynonyms))\n                .then(slicedSynonyms => setSynonyms(slicedSynonyms))\n                .catch((error) => {\n                    setSynonyms([])\n                  });\n        } else {\n            setCardState('');\n        }\n    }\n\n    return (\n        <article className={`flashcard ${partOfSpeech}`} id=\"@@cardId\">\n            <div className={`flashcard__top ${cardState}`} onClick={toggleExpand}>\n                <p className=\"text text--grey text--uppercase\">\n                    {partOfSpeech}\n                </p>\n                <p className=\"text text--heading\">\n                    {word}\n                </p>\n\n                <div className=\"flashcard__description\">\n                    <p className=\"text text--serif\">\n                        {description}\n                    </p>\n                    <div className=\"tags tags__synonyms\">\n                        {synonyms && synonyms.map((synonym, i) => <Synonym key={i} synonym={synonym} />)}\n                    </div>\n                    <p className=\"text margin__top--s margin__bottom--m\">\n                        {example}\n                    </p>\n                </div>\n            </div>\n\n            <div className=\"buttons\">\n                <button className=\"button button--primary\" type=\"button\" onClick={() => toggleFavourite(cardId)}>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill={isFavourite ? 'red' : 'none'}>\n                        <path d=\"M16 27C16 27 3.5 20 3.5 11.5C3.50025 9.99766 4.02082 8.54179 4.97318 7.37989C5.92555 6.21799 7.25093 5.4218 8.72399 5.12667C10.197 4.83154 11.7269 5.0557 13.0533 5.76104C14.3798 6.46637 15.421 7.60934 16 8.99562L16 8.99563C16.579 7.60935 17.6202 6.46638 18.9467 5.76104C20.2731 5.05571 21.8029 4.83155 23.276 5.12667C24.7491 5.4218 26.0745 6.21799 27.0268 7.37989C27.9792 8.54178 28.4997 9.99766 28.5 11.5C28.5 20 16 27 16 27Z\" stroke={isFavourite ? 'none' : 'black'} stroke-width=\"1.75\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n                    </svg>\n                </button>\n                <a href={`https://youglish.com/pronounce/${word}/english?`} target=\"_blank\" className=\"link link--button\" rel=\"noreferrer\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\">\n                        <path d=\"M17.3406 21.9331L14.9385 28.4531C14.8678 28.645 14.7399 28.8107 14.5722 28.9276C14.4044 29.0446 14.2047 29.1074 14.0002 29.1074C13.7956 29.1074 13.596 29.0446 13.4282 28.9276C13.2604 28.8107 13.1326 28.645 13.0618 28.4531L10.6597 21.9331C10.6097 21.7973 10.5308 21.674 10.4285 21.5717C10.3262 21.4694 10.2029 21.3905 10.0671 21.3405L3.54712 18.9383C3.35518 18.8676 3.18954 18.7398 3.07255 18.572C2.95555 18.4042 2.89282 18.2046 2.89282 18C2.89282 17.7955 2.95555 17.5958 3.07255 17.428C3.18954 17.2602 3.35518 17.1324 3.54712 17.0617L10.0671 14.6596C10.2029 14.6095 10.3262 14.5306 10.4285 14.4283C10.5308 14.326 10.6097 14.2027 10.6597 14.0669L13.0618 7.54693C13.1326 7.35499 13.2604 7.18936 13.4282 7.07236C13.596 6.95537 13.7956 6.89264 14.0002 6.89264C14.2047 6.89264 14.4044 6.95537 14.5722 7.07236C14.7399 7.18936 14.8678 7.35499 14.9385 7.54693L17.3406 14.0669C17.3907 14.2027 17.4695 14.326 17.5719 14.4283C17.6742 14.5306 17.7975 14.6095 17.9333 14.6596L24.4533 17.0617C24.6452 17.1324 24.8108 17.2602 24.9278 17.428C25.0448 17.5958 25.1075 17.7955 25.1075 18C25.1075 18.2046 25.0448 18.4042 24.9278 18.572C24.8108 18.7398 24.6452 18.8676 24.4533 18.9383L17.9333 21.3405C17.7975 21.3905 17.6742 21.4694 17.5719 21.5717C17.4695 21.674 17.3907 21.7973 17.3406 21.9331V21.9331Z\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n                        <path d=\"M22 2V8\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n                        <path d=\"M25 5H19\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n                        <path d=\"M28 9V13\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n                        <path d=\"M30 11H26\" stroke=\"black\" stroke-width=\"1.6\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n                    </svg>\n                </a>\n            </div>\n        </article>\n\n    )\n}\n\nexport default Card;\n","import React, { useState, useEffect } from 'react';\nimport Card from './components/Card/Card';\nimport './styles/style.scss';\n\nconst App = () => {\n  const [cards, setCards] = useState(null);\n  const [shownCards, setShownCards] = useState(null);\n\n  const filterCards = (type) => {\n    type === 'all'\n      ? setShownCards(cards)\n      : setShownCards(cards.filter(card => card.partOfSpeech === type))\n  }\n\n  const getAllItemsFromStorage = () => {\n    return Object.keys(window.localStorage)\n  }\n\n  const getFavourites = () => {\n    const favourites = getAllItemsFromStorage();\n    const favouriteCards = cards.filter(card => favourites.includes(card.cardId));\n    console.log(favouriteCards);\n    setShownCards(favouriteCards);\n  }\n\n\n  useEffect(()=> {\n    fetch('./dictionary.json', {cache: \"reload\"})\n    .then(response => response.json())\n    .then(json => { setCards(json); setShownCards(json); })\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"site__header\">\n        <div className=\"tags\" id=\"tags\">\n          <button className=\"tag\" onClick={() => filterCards('all')}>all</button>\n\n          <button className=\"tag\" onClick={getFavourites}>favourites</button>\n\n          <button className=\"tag\" onClick={() => filterCards('transitive verb')}>verbs</button>\n\n          <button className=\"tag\" onClick={() => filterCards('adjective')}>adjectives</button>\n\n          <button className=\"tag\" onClick={() => filterCards('collocation')}>collocations</button>\n\n          <button className=\"tag\" onClick={() => filterCards('noun')}>nouns</button>\n        </div>\n      </header>\n\n      <div class=\"wrapper\">\n        <main class=\"grid grid__projects\">\n\n          {shownCards && shownCards.map(card =>\n            <Card\n              key={card.cardId}\n              word={card.word}\n              description={card.description}\n              partOfSpeech={card.partOfSpeech}\n              example={card.example}\n              cardId={card.cardId}\n            />)}\n\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}